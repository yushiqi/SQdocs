7.6 vim常用命令
---------------

1. vim的几种模式
~~~~~~~~~~~~~~~~

   .. code:: xml

      正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空
      插入模式（按i进入） 左下角显示--INSERT--
      可视模式（按v进入） 左下角显示--VISUAL--
      替换模式（按r或R开始） 左下角显示 --REPLACE--
      命令行模式（按:或者/或者?开始）
      ex模式 没用过，有兴趣的同学可以自行了解

2. 启动vim
~~~~~~~~~~

.. code:: powershell

   # 直接启动vim
   vim  

   # 打开vim并创建名为filename的文件
   vim filename  

   # 打开单个文件
   vim file    

   # 同时打开多个文件
   vim file1 file2 file3 ...   

   # 在vim窗口中打开一个新文件
   :open file      

   # 在新窗口中打开文件
   :split file     

   # 切换到下一个文件
   :bn     

   # 切换到上一个文件
   :bp     

   # 查看当前打开的文件列表，当前正在编辑的文件会用[]括起来
   :args       

   # 打开远程文件，比如ftp或者share folder
   :e ftp://192.168.10.76/abc.txt
   :e \qadrive est.txt

   # 以只读形式打开文件，但是仍然可以使用 :wq! 写入
   vim -R file

   # 强制性关闭修改功能，无法使用 :wq! 写入
   vim -M file

3. 导航命令
~~~~~~~~~~~

.. code:: shell

   % 括号匹配

4. 插入命令
~~~~~~~~~~~

.. code:: shell

   i 在当前位置生前插入

   I 在当前行首插入

   a 在当前位置后插入

   A 在当前行尾插入

   o 在当前行之后插入一行

   O 在当前行之前插入一行

5. 查找命令
~~~~~~~~~~~

.. code:: shell

   /text　查找text，按n健查找下一个，按N健查找前一个。

   ?text　查找text，反向查找，按n健查找下一个，按N健查找前一个。

   vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$

   :set ignorecase　忽略大小写的查找

   :set noignorecase　不忽略大小写的查找

   查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。

   :set hlsearch　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。

   :set nohlsearch　关闭高亮搜索显示

   :nohlsearch　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。

   :set incsearch　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。

   :set wrapscan　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。

**快速查找，不需要手打字符即可查找**

.. code:: xml

   *        向后（下）寻找游标所在处的单词
   #        向前（上）寻找游标所在处的单词


   以上两种查找，n,N 的继续查找命令依然可以适用

**精准查找：匹配单词查找**

如果文本中有 ``hello``\ ，\ ``helloworld``\ ，\ ``hellopython``

那我使用 /hello ，这三个词都会匹配到。

有没有办法实现精准查找呢？可以使用

::

   /hello\>

**精准查找：匹配行首、行末**

::

   # hello位于行首
   /^hello

   # world位于行末
   /world$

6. 替换命令
~~~~~~~~~~~

.. code:: shell

   ra 将当前字符替换为a，当期字符即光标所在字符。

   s/old/new/ 用old替换new，替换当前行的第一个匹配

   s/old/new/g 用old替换new，替换当前行的所有匹配

   %s/old/new/ 用old替换new，替换所有行的第一个匹配

   %s/old/new/g 用old替换new，替换整个文件的所有匹配

   :10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。

   ddp 交换光标所在行和其下紧邻的一行。

7. 移动命令
~~~~~~~~~~~

::

   h 左移一个字符
   l 右移一个字符，这个命令很少用，一般用w代替。
   k 上移一个字符
   j 下移一个字符

   以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！，这里的Esc是必须的，否则命令不生效。

   w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。

   b 向后移动一个单词 2b 向后移动2个单词

   e，同w，只不过是光标停在单词尾部

   ge，同b，光标停在单词尾部。

   ^ 移动到本行第一个非空白字符上。

   0（数字0）移动到本行第一个字符上，

    移动到本行第一个字符。同0健。

   $ 移动到行尾 3$ 移动到下面3行的行尾

   gg 移动到文件头。 = [[

   G（shift + g） 移动到文件尾。 = ]]

   f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。

   F 同f，反向查找。

   跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。

   Ctrl + e 向下滚动一行

   Ctrl + y 向上滚动一行

   Ctrl + d 向下滚动半屏

   Ctrl + u 向上滚动半屏

   Ctrl + f 向下滚动一屏

   Ctrl + b 向上滚动一屏

8. 撤销重做
~~~~~~~~~~~

::

   u 撤销（Undo）

   U 撤销对整行的操作

   Ctrl + r 重做（Redo），即撤销的撤销。

9. 删除命令
~~~~~~~~~~~

**以字符为单位删除**

::

   x   删除当前字符
   3x  删除当前字符3次

   X   删除当前字符的前一个字符。
   3X  删除当前光标向前三个字符

   dl  删除当前字符， dl=x
   dh  删除前一个字符，X=dh

   D   删除当前字符至行尾。D=d$
   d$  删除当前字符至行尾
   d^  删除当前字符之前至行首

**以单词为单位删除**

::

   dw  删除当前字符到单词尾
   daw 删除当前字符所在单词

**以行为单位删除**

::

   dd  删除当前行
   dj  删除下一行
   dk  删除上一行

   dgg  删除当前行至文档首部
   d1G  删除当前行至文档首部
   dG   删除当前行至文档尾部

   kdgg  删除当前行之前所有行（不包括当前行）
   jdG   删除当前行之后所有行（不包括当前行）



   10d     删除当前行开始的10行。
   :1,10d  删除1-10行
   :11,$d  删除11行及以后所有的行
   :1,$d   删除所有行
   J　　   删除两行之间的空行，实际上是合并两行。

10. 复制黏贴
~~~~~~~~~~~~

**普通模式中使用y复制**

::

   yy   复制游标所在的整行（3yy表示复制3行）

   y^   复制至行首，或y0。不含光标所在处字符。
   y$   复制至行尾。含光标所在处字符。

   yw   复制一个单词。
   y2w  复制两个单词。

   yG   复制至文本末。
   y1G  复制至文本开头。

**普通模式中使用p粘贴**

::

   p(小写)：代表粘贴至光标后（下边，右边）
   P(大写)：代表粘贴至光标前（上边，左边）

11. 剪切命令
~~~~~~~~~~~~

::

   dd    其实就是剪切命令，剪切当前行

   ddp   剪切当前行并粘贴，可实现当前行和下一行调换位置


   正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切

   ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴

   :1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。

   :1, 10 m 20 将第1-10行移动到第20行之后。

12. 退出命令
~~~~~~~~~~~~

::

   :wq 保存并退出

   ZZ 保存并退出

   :q! 强制退出并忽略所有更改

   :e! 放弃所有修改，并打开原来文件。

13. 窗口命令
~~~~~~~~~~~~

::

   :split或new 打开一个新窗口，光标停在顶层的窗口上

   :split file或:new file 用新窗口打开文件

   split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。

   Ctrl+ww 移动到下一个窗口

   Ctrl+wj 移动到下方的窗口

   Ctrl+wk 移动到上方的窗口

   :close 最后一个窗口不能使用此命令，可以防止意外退出vim。

   :q 如果是最后一个被关闭的窗口，那么将退出vim。

   ZZ 保存并退出。

   关闭所有窗口，只保留当前窗口

   :only

14. 排版功能
~~~~~~~~~~~~

**缩进**

::

   :set shiftwidth?   查看缩进值
   :set shiftwidth=4  设置缩进值为4

   # 缩进相关 最好写到配置文件中  ~/.vimrc
   :set tabstop=4
   :set softtabstop=4
   :set shiftwidth=4
   :set expandtab

   >>   向右缩进
   <<   取消缩进

如何你要对代码进行缩进，还可以用 ``==``
对当前行缩进，如果要对多行对待缩进，则使用
n\ ``==``\ ，这种方式要求你所编辑的文件的扩展名是被vim所识别的，比如\ ``.py``\ 文件。

**排版**

::

   :ce   居中
   :le   靠左
   :ri   靠右

15. 注释命令
~~~~~~~~~~~~

**多行注释**

::

   进入命令行模式，按ctrl + v进入 visual block模式，然后按j, 或者k选中多行，把需要注释的行标记起来

   按大写字母I，再插入注释符，例如//

   按esc键就会全部注释了

**取消多行注释**

::

   进入命令行模式，按ctrl + v进入 visual block模式，按字母l横向选中列的个数，例如 // 需要选中2列

   按字母j，或者k选中注释符号

   按d键就可全部取消注释

**复杂注释**

::

   :3,5 s/^/#/g 注释第3-5行
   :3,5 s/^#//g 解除3-5行的注释


   :1,$ s/^/#/g 注释整个文档
   :1,$ s/^#//g 取消注释整个文档


   :%s/^/#/g 注释整个文档，此法更快
   :%s/^#//g 取消注释整个文档

16. 调整视野
~~~~~~~~~~~~

::

   "zz"：命令会把当前行置为屏幕正中央，
   "zt"：命令会把当前行置于屏幕顶端
   "zb"：则把当前行置于屏幕底端.

   Ctrl + e 向下滚动一行
   Ctrl + y 向上滚动一行

   Ctrl + d 向下滚动半屏
   Ctrl + u 向上滚动半屏

   Ctrl + f 向下滚动一屏
   Ctrl + b 向上滚动一屏


   【跳到指定行】：两种方法

   可以先把行号打开
   :set nu  打开行号

   :20    跳到第20行
   20G    跳到第20行

17. 区域选择
~~~~~~~~~~~~

::

   要进行区域选择，要先进入可视模式

   v   以字符为单位，上下左右选择
   V   以行为单位，上下选择

   选择后可进行操作
   d   剪切/删除
   y   复制

   Ctrl+v   如果当前是V(大写)模式，就变成v(小写)
            如果当前是v(小写)模式，就变成普通模式。
            如果当前是普通模式，就进入v(小写)模式

   利用这个，可以进行多行缩进。

   ggVG   选择全文

18. 窗口控制
~~~~~~~~~~~~

**新建窗口**

::

   # 打开两个文件分属两个窗口
   vim -o 1.txt 2.txt


   # 假设现在已经打开了1.txt

   :sp 2.txt   开启一个横向的窗口，编辑2.txt
   :vsp 2.txt  开启一个竖向的窗口，编辑2.txt

   :split        将当前窗口再复制一个窗口出来，内容同步，游标可以不同
   :split 2.txt  在新窗口打开2.txt的横向窗口

   # 需要注意：内容同步，但是游标位置是独立的

   Ctrl-w s    将当前窗口分成水平窗口
   Ctrl-w v    将当前窗口分成竖直窗口

   Ctrl-w q    等同:q 结束分割出来的视窗。
   Ctrl-w q!   等同:q! 结束分割出来的视窗。
   Ctrl-w o    打开一个视窗并且隐藏之前的所有视窗

**窗口切换**

::

   # 特别说明：Ctrl w <字母> 不需要同时按

   Ctrl-w h    切换到左边窗口
   Ctrl-w l    切换到右边窗口

   Ctrl-w j    切换到下边窗口
   Ctrl-w k    切换到上边窗口


   # 特别说明：全屏模式下
   :n    切换下一个窗口
   :N    切换上一个窗口
   :bp   切换上一个窗口

   # 特别说明：非全屏模式

   :bn    切换下一个窗口，就当前位置的窗口的内容变了，其他窗口不变
   :bN    切换上一个窗口，就当前位置的窗口的内容变了，其他窗口不变

**窗口移动**

::

   # 特别说明：Ctrl w <字母> 不需要同时按

   Ctrl-w J   将当前视窗移至最下面
   Ctrl-w K   将当前视窗移最上面

   Ctrl-w H   将当前视窗移至最左边
   Ctrl-w L   将当前视窗移至最右边

   Ctrl-ww    按顺序切换窗口

**调整尺寸**

::

   Ctrl-w +   增加窗口高度

   Ctrl-w -   减少窗口高度

**退出窗口**

::

   :close    关闭当前窗口
   :close!   强制关闭当前窗口

   :q       退出，不保存
   :q!      强制退出，不保存

   :x       保存退出
   :wq      保存退出
   :wq!     强制保存退出

   :w <[路径/]文件名>        另存为
   :savesa <[路径/]文件名>   另存为

   ZZ 保存并退出。

   :only    关闭所有窗口，只保留当前窗口(前提：其他窗口内容有改变的话都要先保存)
   :only!   关闭所有窗口，只保留当前窗口

   :qall 放弃所有操作并退出
   :wall 保存所有，
   :wqall 保存所有并退出。

19. 文档加密
~~~~~~~~~~~~

::

   vim -x file_name

   然后输入密码：
   确认密码：

   如果不修改内容也要保存。:wq，不然密码设定不会生效。

20. 执行命令
~~~~~~~~~~~~

::

   # 重复前一次命令
   .

   # 执行shell命令
   :!command

   # 比如列出当前目录下文件
   :!ls

   # 执行脚本
   :!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。
   :!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。

   :suspend或Ctrl - Z 挂起vim，回到shell，按fg可以返回vim。

   # 执行完当前命令后，自动回到vim环境，但不知为何文件内容变成空了
   :silent !command

21. 帮助命令
~~~~~~~~~~~~

::

   在Unix/Linux系统上
   $ vimtutor

   # 普通模式下
   键盘输入vim或F1

   # 命令行模式下

   :help     显示整个帮助
   :help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。
   :help 'number' Vim选项的帮助用单引号括起


   在Windows系统上
   :help tutor

22. 配置命令
~~~~~~~~~~~~

显示当前设定

::

   :set或者:se显示所有修改过的配置
   :set all 显示所有的设定值
   :set option? 显示option的设定值
   :set nooption 取消当期设定值
   :ver   显示vim的所有信息（包括版本和参数等）

   # 需要注意：全屏模式下
   :args   查看当前打开的文件列表，当前正在编辑的文件会用[]括起来

更改设定

::

   :set nu   显示行号

   set autoindent(ai)   设置自动缩进
   set autowrite(aw)    设置自动存档，默认未打开
   set backup(bk) 设置自动备份，默认未打开

   set background=dark或light，设置背景风格

   set cindent(cin) 设置C语言风格缩进

   :set ts=4   设置tab键转换为4个空格

   :set ff=unix   # 修改文件dos文件为unix

   :set shiftwidth?   查看缩进值
   :set shiftwidth=4  设置缩进值为4

   :set ignorecase　　忽略大小写的查找
   :set noignorecase　　不忽略大小写的查找

   :set paste  # insert模式下，粘贴格式不会乱掉

   :set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看

   :scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。

   :set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:>-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。


   :syntax        列出已经定义的语法项
   :syntax clear  清除已定义的语法规则

   :syntax case match    大小写敏感，int和Int将视为不同的语法元素
   :syntax case ignore   大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案
